{
  "$id": "userScripts",
  "permissions": [
    "manifest:user_scripts",
    "userScripts"
  ],
  "functions": [
    {
      "name": "register",
      "max_manifest_version": 2,
      "type": "function",
      "description": "Register a user script programmatically given its $(ref:userScripts.UserScriptOptions), and resolves to an object with the unregister() function",
      "async": "callback",
      "parameters": [
        {
          "allOf": [
            {
              "$ref": "#/types/UserScriptOptions"
            },
            {
              "name": "userScriptOptions"
            }
          ]
        },
        {
          "name": "callback",
          "type": "function",
          "parameters": [
            {
              "name": "legacyRegisteredUserScript",
              "type": "object",
              "description": "An object that represents a user script registered programmatically",
              "properties": {
                "unregister": {
                  "type": "function",
                  "description": "Unregister a user script registered programmatically",
                  "async": true,
                  "parameters": []
                }
              },
              "required": [
                "unregister"
              ]
            }
          ]
        }
      ]
    },
    {
      "name": "register",
      "min_manifest_version": 3,
      "type": "function",
      "description": "Registers one or more user scripts for this extension.",
      "async": true,
      "parameters": [
        {
          "name": "scripts",
          "type": "array",
          "items": {
            "$ref": "#/types/RegisteredUserScript"
          },
          "description": "List of user scripts to be registered."
        }
      ]
    },
    {
      "name": "update",
      "min_manifest_version": 3,
      "type": "function",
      "description": "Updates one or more user scripts for this extension.",
      "async": true,
      "parameters": [
        {
          "name": "scripts",
          "type": "array",
          "items": {
            "$merge": {
              "source": {
                "$ref": "userScripts#/types/RegisteredUserScript"
              },
              "with": {
                "type": "object",
                "properties": {
                  "js": {
                    "type": "array",
                    "items": {
                      "$ref": "#/types/ScriptSource"
                    }
                  }
                }
              }
            }
          },
          "description": "List of user scripts to be updated."
        }
      ]
    },
    {
      "name": "unregister",
      "min_manifest_version": 3,
      "type": "function",
      "description": "Unregisters all dynamically-registered user scripts for this extension.",
      "async": true,
      "parameters": [
        {
          "allOf": [
            {
              "$ref": "#/types/UserScriptFilter"
            },
            {
              "name": "filter",
              "optional": true,
              "description": "If specified, this method unregisters only the user scripts that match it."
            }
          ]
        }
      ]
    },
    {
      "name": "getScripts",
      "min_manifest_version": 3,
      "type": "function",
      "description": "Returns all dynamically-registered user scripts for this extension.",
      "async": "callback",
      "parameters": [
        {
          "allOf": [
            {
              "$ref": "#/types/UserScriptFilter"
            },
            {
              "name": "filter",
              "optional": true,
              "description": "If specified, this method returns only the user scripts that match it."
            }
          ]
        },
        {
          "name": "callback",
          "type": "function",
          "parameters": [
            {
              "name": "scripts",
              "type": "array",
              "items": {
                "$ref": "#/types/RegisteredUserScript"
              },
              "description": "List of registered user scripts."
            }
          ]
        }
      ]
    },
    {
      "name": "configureWorld",
      "min_manifest_version": 3,
      "type": "function",
      "description": "Configures the environment for scripts running in a USER_SCRIPT world.",
      "async": true,
      "parameters": [
        {
          "allOf": [
            {
              "$ref": "#/types/WorldProperties"
            },
            {
              "name": "properties",
              "description": "The desired configuration for a USER_SCRIPT world."
            }
          ]
        }
      ]
    },
    {
      "name": "resetWorldConfiguration",
      "min_manifest_version": 3,
      "type": "function",
      "description": "Resets the configuration for a given world. That world will fall back to the default world's configuration.",
      "async": true,
      "parameters": [
        {
          "name": "worldId",
          "type": "string",
          "optional": true,
          "default": "",
          "description": "The ID of the USER_SCRIPT world to reset. If omitted or empty, resets the default world's configuration."
        }
      ]
    },
    {
      "name": "getWorldConfigurations",
      "min_manifest_version": 3,
      "type": "function",
      "description": "Returns all registered USER_SCRIPT world configurations.",
      "async": "callback",
      "parameters": [
        {
          "name": "callback",
          "type": "function",
          "parameters": [
            {
              "name": "configurations",
              "type": "array",
              "items": {
                "$ref": "#/types/WorldProperties"
              },
              "description": "All configurations registered with configureWorld()."
            }
          ]
        }
      ]
    }
  ],
  "definitions": {
    "OptionalOnlyPermission": {
      "anyOf": [
        {
          "type": "string",
          "enum": [
            "userScripts"
          ]
        }
      ]
    },
    "WebExtensionManifest": {
      "properties": {
        "user_scripts": {
          "type": "object",
          "max_manifest_version": 2,
          "properties": {
            "api_script": {
              "$ref": "manifest#/types/ExtensionURL"
            }
          }
        }
      }
    }
  },
  "refs": {
    "userScripts#/definitions/OptionalOnlyPermission": {
      "namespace": "manifest",
      "type": "OptionalOnlyPermission"
    },
    "userScripts#/definitions/WebExtensionManifest": {
      "namespace": "manifest",
      "type": "WebExtensionManifest"
    }
  },
  "types": {
    "UserScriptOptions": {
      "max_manifest_version": 2,
      "type": "object",
      "description": "Details of a user script",
      "properties": {
        "js": {
          "type": "array",
          "description": "The list of JS files to inject",
          "minItems": 1,
          "items": {
            "$ref": "extensionTypes#/types/ExtensionFileOrCode"
          }
        },
        "scriptMetadata": {
          "allOf": [
            {
              "$ref": "extensionTypes#/types/PlainJSONValue"
            },
            {
              "description": "An opaque user script metadata value"
            }
          ]
        },
        "matches": {
          "type": "array",
          "minItems": 1,
          "items": {
            "$ref": "manifest#/types/MatchPattern"
          }
        },
        "excludeMatches": {
          "type": "array",
          "minItems": 1,
          "items": {
            "$ref": "manifest#/types/MatchPattern"
          }
        },
        "includeGlobs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "excludeGlobs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "allFrames": {
          "type": "boolean",
          "default": false,
          "description": "If allFrames is <code>true</code>, implies that the JavaScript should be injected into all frames of current page. By default, it's <code>false</code> and is only injected into the top frame."
        },
        "matchAboutBlank": {
          "type": "boolean",
          "default": false,
          "description": "If matchAboutBlank is true, then the code is also injected in about:blank and about:srcdoc frames if your extension has access to its parent document. Code cannot be inserted in top-level about:-frames. By default it is <code>false</code>."
        },
        "runAt": {
          "allOf": [
            {
              "$ref": "extensionTypes#/types/RunAt"
            },
            {
              "default": "document_idle",
              "description": "The soonest that the JavaScript will be injected into the tab. Defaults to \"document_idle\"."
            }
          ]
        },
        "cookieStoreId": {
          "anyOf": [
            {
              "type": "array",
              "minItems": 1,
              "items": {
                "type": "string"
              }
            },
            {
              "type": "string"
            }
          ],
          "description": "limit the set of matched tabs to those that belong to the given cookie store id"
        }
      },
      "required": [
        "js",
        "matches"
      ]
    },
    "RegisteredUserScript": {
      "min_manifest_version": 3,
      "type": "object",
      "description": "An object that represents a user script registered programmatically",
      "properties": {
        "id": {
          "type": "string",
          "description": "The ID of the user script specified in the API call. This property must not start with a '_' as it's reserved as a prefix for generated script IDs."
        },
        "allFrames": {
          "type": "boolean",
          "description": "If allFrames is <code>true</code>, implies that the JavaScript should be injected into all frames of current page. By default, it's <code>false</code> and is only injected into the top frame."
        },
        "js": {
          "type": "array",
          "description": "The list of ScriptSource objects defining sources of scripts to be injected into matching pages.",
          "items": {
            "$ref": "#/types/ScriptSource"
          }
        },
        "matches": {
          "type": "array",
          "description": "At least one of matches or includeGlobs should be non-empty. The script runs in documents whose URL match either pattern.",
          "items": {
            "$ref": "manifest#/types/MatchPattern"
          }
        },
        "excludeMatches": {
          "type": "array",
          "items": {
            "$ref": "manifest#/types/MatchPattern"
          }
        },
        "includeGlobs": {
          "type": "array",
          "description": "At least one of matches or includeGlobs should be non-empty. The script runs in documents whose URL match either pattern.",
          "items": {
            "type": "string"
          }
        },
        "excludeGlobs": {
          "type": "array",
          "items": {
            "type": "string"
          }
        },
        "runAt": {
          "allOf": [
            {
              "$ref": "extensionTypes#/types/RunAt"
            },
            {
              "description": "The soonest that the JavaScript will be injected into the tab. Defaults to \"document_idle\"."
            }
          ]
        },
        "world": {
          "allOf": [
            {
              "$ref": "#/types/ExecutionWorld"
            },
            {
              "description": "The JavaScript script for a script to execute within. Defaults to \"USER_SCRIPT\"."
            }
          ]
        },
        "worldId": {
          "type": "string",
          "description": "If specified, specifies a specific user script world ID to execute in. Only valid if `world` is omitted or is `USER_SCRIPT`. If `worldId` is omitted, the script will execute in the default user script world (\"\"). Values with leading underscores (`_`) are reserved. The maximum length is 256."
        }
      },
      "required": [
        "id",
        "js"
      ]
    },
    "ExecutionWorld": {
      "min_manifest_version": 3,
      "type": "string",
      "enum": [
        "MAIN",
        "USER_SCRIPT"
      ],
      "description": "The JavaScript world for a script to execute within. <code>USER_SCRIPT</code> is the default execution environment of user scripts, <code>MAIN</code> is the web page's execution environment."
    },
    "UserScriptFilter": {
      "min_manifest_version": 3,
      "type": "object",
      "description": "Optional filter to use with getScripts() and unregister().",
      "properties": {
        "ids": {
          "type": "array",
          "items": {
            "type": "string"
          }
        }
      }
    },
    "ScriptSource": {
      "min_manifest_version": 3,
      "description": "Object with file xor code property. Equivalent to the ExtensionFileOrCode, except the file remains a relative URL.",
      "anyOf": [
        {
          "type": "object",
          "properties": {
            "file": {
              "type": "string",
              "description": "The path of the JavaScript file to inject relative to the extension's root directory.",
              "format": "unresolvedRelativeUrl"
            }
          },
          "required": [
            "file"
          ]
        },
        {
          "type": "object",
          "properties": {
            "code": {
              "type": "string"
            }
          },
          "required": [
            "code"
          ]
        }
      ]
    },
    "WorldProperties": {
      "min_manifest_version": 3,
      "type": "object",
      "description": "The configuration of a USER_SCRIPT world.",
      "properties": {
        "worldId": {
          "type": "string",
          "default": "",
          "description": "The identifier of the world. Values with leading underscores (`_`) are reserved. The maximum length is 256. Defaults to the default USER_SCRIPT world (\"\")."
        },
        "csp": {
          "type": "string",
          "description": "The world's Content Security Policy. Defaults to the CSP of regular content scripts, which prohibits dynamic code execution such as eval."
        },
        "messaging": {
          "type": "boolean",
          "default": false,
          "description": "Whether the runtime.sendMessage and runtime.connect methods are exposed. Defaults to not exposing these messaging APIs."
        }
      }
    }
  },
  "allowedContexts": [
    "content"
  ],
  "events": [
    {
      "name": "onBeforeScript",
      "max_manifest_version": 2,
      "permissions": [
        "manifest:user_scripts.api_script"
      ],
      "allowedContexts": [
        "content",
        "content_only"
      ],
      "type": "function",
      "description": "Event called when a new userScript global has been created",
      "parameters": [
        {
          "type": "object",
          "name": "userScript",
          "properties": {
            "metadata": {
              "description": "The userScript metadata (as set in userScripts.register)"
            },
            "global": {
              "description": "The userScript global"
            },
            "defineGlobals": {
              "type": "function",
              "description": "Exports all the properties of a given plain object as userScript globals",
              "parameters": [
                {
                  "type": "object",
                  "name": "sourceObject",
                  "description": "A plain object whose properties are exported as userScript globals"
                }
              ]
            },
            "export": {
              "type": "function",
              "description": "Convert a given value to make it accessible to the userScript code",
              "parameters": [
                {
                  "name": "value",
                  "description": "A value to convert into an object accessible to the userScript"
                }
              ],
              "returns": {}
            }
          },
          "required": [
            "metadata",
            "global",
            "defineGlobals",
            "export"
          ]
        }
      ]
    }
  ]
}
